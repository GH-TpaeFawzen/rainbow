#!/usr/bin/env python
# --------------------------------------------------------------------------------------------------
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------------------------------------

from optparse import OptionParser, OptionGroup
import ConfigParser
import random
import sys
import re


# --------------------------------------------------------------------------------------------------
# Constants
# --------------------------------------------------------------------------------------------------

COLOREX_HOME = '/usr/share/colorex'
COLOREX_CONFIGS_HOME = COLOREX_HOME + '/configs'
USAGE = "%prog [options] [file...] "
VERSION_FILE = COLOREX_HOME + '/VERSION'
DESCRIPTION = """Display files or STDIN with pretty colors for matched patterns. If you don't specify
files, stdin is used. For more information, see colorex man page."""

FILTERS = {
  'red':                { 'short_option': 'r', 'help': 'display RED pattern in red',                                  'filter_start': chr(27)+'[31m', 'filter_end': chr(27)+'[39m' },
  'green':              { 'short_option': 'g', 'help': 'display GREEN pattern in green',                              'filter_start': chr(27)+'[32m', 'filter_end': chr(27)+'[39m' },
  'yellow':             { 'short_option': 'y', 'help': 'display YELLOW pattern in yellow',                            'filter_start': chr(27)+'[33m', 'filter_end': chr(27)+'[39m' },
  'blue':               { 'short_option': 'b', 'help': 'display BLUE pattern in blue',                                'filter_start': chr(27)+'[34m', 'filter_end': chr(27)+'[39m' },
  'magenta':            { 'short_option': 'm', 'help': 'display MAGENTA pattern in magenta',                          'filter_start': chr(27)+'[35m', 'filter_end': chr(27)+'[39m' },
  'cyan':               { 'short_option': 'c', 'help': 'display CYAN pattern in cyan',                                'filter_start': chr(27)+'[36m', 'filter_end': chr(27)+'[39m' },
  'bred':               { 'short_option': 'R', 'help': 'display BRED pattern in red background',                      'filter_start': chr(27)+'[41m', 'filter_end': chr(27)+'[49m' },
  'bgreen':             { 'short_option': 'G', 'help': 'display BGREEN pattern in green background',                  'filter_start': chr(27)+'[42m', 'filter_end': chr(27)+'[49m' },
  'byellow':            { 'short_option': 'Y', 'help': 'display BYELLOW pattern in yellow background',                'filter_start': chr(27)+'[43m', 'filter_end': chr(27)+'[49m' },
  'bblue':              { 'short_option': 'B', 'help': 'display BBLUE pattern in blue background',                    'filter_start': chr(27)+'[44m', 'filter_end': chr(27)+'[49m' },
  'bmagenta':           { 'short_option': 'M', 'help': 'display BMAGENTA pattern in magenta background',              'filter_start': chr(27)+'[45m', 'filter_end': chr(27)+'[49m' },
  'bcyan':              { 'short_option': 'C', 'help': 'display BCYAN pattern in cyan background',                    'filter_start': chr(27)+'[46m', 'filter_end': chr(27)+'[49m' },
  'bold':               {                      'help': 'display BOLD pattern in bold',                                'filter_start': chr(27)+'[1m',  'filter_end': chr(27)+'[22m' },
  'faint':              {                      'help': 'display FAINT pattern in decreased intensity',                'filter_start': chr(27)+'[2m',  'filter_end': chr(27)+'[22m' },
  'italic':             {                      'help': 'display ITALIC pattern in italic',                            'filter_start': chr(27)+'[3m',  'filter_end': chr(27)+'[23m' },
  'underline':          {                      'help': 'display UNDERLINE pattern double underlined',                 'filter_start': chr(27)+'[4m',  'filter_end': chr(27)+'[24m' },
  'underline-double':   {                      'help': 'display UNDERLINE_DOUBLE pattern underlined',                 'filter_start': chr(27)+'[21m', 'filter_end': chr(27)+'[24m' },
  'blink':              {                      'help': 'display BLINK pattern blinking',                              'filter_start': chr(27)+'[5m',  'filter_end': chr(27)+'[25m' },
  'blink-rapid':        {                      'help': 'display BLINK pattern blinking',                              'filter_start': chr(27)+'[6m',  'filter_end': chr(27)+'[25m' },
  'negative':           {                      'help': 'display NEGATIVE pattern swapping foreground and background', 'filter_start': chr(27)+'[7m',  'filter_end': chr(27)+'[27m' },
  'hide':               {                      'help': 'hide HIDE pattern',                                           'filter_start': chr(27)+'[8m',  'filter_end': chr(27)+'[28m' }
 }
 
FILTERS_GROUPS = {
  'text_color':       { 'name': 'Text color',
                        'help': 'Use these options to associate patterns to text colors.',
                        'filters': [ 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' ] },
  'background_color': { 'name': 'Background color',
                        'help': 'Use these options to associate patterns to text background colors.',
                        'filters': [ 'bred', 'bgreen', 'byellow', 'bblue', 'bmagenta', 'bcyan' ] },
  'formattings':      { 'name': 'Formatting',
                        'help': 'Use these options to associate patterns to text formattings. Some of the filters do not work on all terminals.',
                        'filters': [ 'bold', 'faint', 'italic', 'underline', 'underline-double', 'blink', 'blink-rapid', 'negative', 'hide' ] }
 }


# --------------------------------------------------------------------------------------------------
# Functions
# --------------------------------------------------------------------------------------------------

def register_pattern(pattern,filter_name):
    if pattern not in patterns:
        patterns[pattern] = { 'pattern_start': '',
                              'pattern_end': '',
                              'regex' : re.compile(pattern) }
    patterns[pattern]['pattern_start'] += FILTERS[filter_name]['filter_start']
    patterns[pattern]['pattern_end'] += FILTERS[filter_name]['filter_end']

def pattern_option_callback(option, opt, value, parser):
    register_pattern(value,option.get_opt_string()[2:])

def parse_config(config):
    cfg = ConfigParser.ConfigParser()
    cfg.read(config)
    for filter in cfg.options("filters"):
        if filter in FILTERS:
            register_pattern(cfg.get("filters",filter),filter)
        else:
            sys.stderr.write("ERROR: unknown filter %s\n" % filter)
            sys.exit(1)

def colorize(line):
    for (pattern,pattern_filter) in patterns.items():
        for match in pattern_filter['regex'].finditer(line):
            line = line.replace(match.group(),pattern_filter['pattern_start'] + match.group() + pattern_filter['pattern_end'])
    return line.rstrip()


# --------------------------------------------------------------------------------------------------
# Main
# --------------------------------------------------------------------------------------------------

patterns = {}

# Command line options parser setup
parser = OptionParser(usage=USAGE, version="%prog " + open(VERSION_FILE, 'r').readline(), description=DESCRIPTION)
parser.formatter.max_help_position = 50
parser.formatter.width = 100
parser.add_option("-f", "--config", action="append", dest="config", type="string", help="blabla.")

for filter_group in FILTERS_GROUPS.values():
    filter_option_group = OptionGroup(parser, filter_group['name'], filter_group['help'])
    for filter_name in filter_group['filters']:
        filter = FILTERS[filter_name]
        if 'short_option' in filter:
            filter_option_group.add_option("-" + filter['short_option'],
                                           "--" + filter_name, action="callback",
                                           callback=pattern_option_callback,
                                           type="string",
                                           help=filter['help'])
        else:
            filter_option_group.add_option("--" + filter_name,
                                           action="callback",
                                           callback=pattern_option_callback,
                                           type="string",
                                           help=filter['help'])
    parser.add_option_group(filter_option_group)

(options, args) = parser.parse_args()

if options.config:
    for config in options.config:
        parse_config(config)

try:
    if args:
        for file in args:
            try:
                file_handle = open(file, 'r')
                for line in file_handle:
                    print colorize(line)
                file_handle.close()
            except Exception,info:
                sys.stderr.write("ERROR : can't read file %s\n" % file)
                sys.stderr.write(str(info) + '\n')
    else:
        while True:
            line = raw_input()
            print colorize(line)

except EOFError:
    sys.exit(0)

except KeyboardInterrupt:
    sys.exit(0)

except Exception, info:
    sys.stderr.write("ERROR : %s\n" % info)
    sys.exit(1)
